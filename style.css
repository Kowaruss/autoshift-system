let currentSystem = null;

document.addEventListener('DOMContentLoaded', function() {
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('pitsCount').addEventListener('change', generatePitsConfig);
    document.getElementById('initBtn').addEventListener('click', initializeSystem);
    document.getElementById('autoshiftBtn').addEventListener('click', performAutoshift);
    
    generatePitsConfig();
    console.log("–°–∞–π—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!");
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∏—Ç–æ–≤
function generatePitsConfig() {
    const pitsCount = parseInt(document.getElementById('pitsCount').value);
    const container = document.getElementById('pitsConfig');
    container.innerHTML = '<h3>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∏—Ç–æ–≤:</h3>';
    
    for (let i = 1; i <= pitsCount; i++) {
        const div = document.createElement('div');
        div.className = 'input-group';
        div.innerHTML = `
            <label>–ü–∏—Ç ${i} - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π:</label>
            <input type="number" id="pit${i}Positions" value="${i === 1 ? 15 : 20}" min="1">
        `;
        container.appendChild(div);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
function initializeSystem() {
    const pitsCount = parseInt(document.getElementById('pitsCount').value);
    const totalEmployees = parseInt(document.getElementById('totalEmployees').value);
    
    const pitsConfig = [];
    let totalPositions = 0;
    
    for (let i = 1; i <= pitsCount; i++) {
        const positions = parseInt(document.getElementById(`pit${i}Positions`).value);
        pitsConfig.push({
            id: i,
            positions: positions,
            employees: [],
            chains: []
        });
        totalPositions += positions;
    }

    const restingCount = totalEmployees - totalPositions;
    
    if (restingCount < 0) {
        alert('–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π!');
        return;
    }

    currentSystem = {
        pits: pitsConfig,
        totalEmployees: totalEmployees,
        restingEmployees: restingCount,
        employees: Array.from({length: totalEmployees}, (_, i) => ({
            id: i + 1,
            pit: null,
            position: null,
            isResting: false,
            chain: null
        }))
    };

    distributeEmployees();
    createChains();
    updateDisplay();
    document.getElementById('autoshiftBtn').disabled = false;
    
    console.log("–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");
}

// –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –ø–∏—Ç–∞–º
function distributeEmployees() {
    if (!currentSystem) return;

    let employeeIndex = 0;
    
    currentSystem.pits.forEach(pit => {
        pit.employees = [];
        for (let i = 0; i < pit.positions; i++) {
            if (employeeIndex < currentSystem.totalEmployees) {
                const employee = currentSystem.employees[employeeIndex];
                employee.pit = pit.id;
                employee.position = i + 1;
                employee.isResting = false;
                pit.employees.push(employee);
                employeeIndex++;
            }
        }
    });

    for (let i = employeeIndex; i < currentSystem.totalEmployees; i++) {
        currentSystem.employees[i].isResting = true;
        currentSystem.employees[i].pit = null;
        currentSystem.employees[i].position = null;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–µ–∫
function createChains() {
    if (!currentSystem) return;

    currentSystem.pits.forEach(pit => {
        pit.chains = [];
        
        if (pit.employees.length === 0) return;
        
        const chainSize = Math.min(4, Math.max(2, Math.ceil(pit.employees.length / 3)));
        
        for (let i = 0; i < pit.employees.length; i += chainSize) {
            const chain = pit.employees.slice(i, i + chainSize);
            pit.chains.push(chain);
        }
    });
}

// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
function updateDisplay() {
    if (!currentSystem) return;

    const container = document.getElementById('pitsContainer');
    container.innerHTML = '';

    document.getElementById('totalEmployeesCount').textContent = currentSystem.totalEmployees;
    document.getElementById('workingCount').textContent = currentSystem.totalEmployees - currentSystem.restingEmployees;
    document.getElementById('restingCount').textContent = currentSystem.restingEmployees;

    currentSystem.pits.forEach(pit => {
        const pitElement = document.createElement('div');
        pitElement.className = 'pit';
        
        let chainsHTML = '';
        pit.chains.forEach((chain, index) => {
            chainsHTML += `
                <div class="chain">
                    <div class="chain-title">–¶–µ–ø–æ—á–∫–∞ ${index + 1} (${chain.length} —á–µ–ª.)</div>
                    ${chain.map(emp => `
                        <div class="employee working">
                            <span class="employee-id">–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${emp.id}</span>
                            <span class="employee-position">–ü–æ–∑. ${emp.position}</span>
                        </div>
                    `).join('')}
                </div>
            `;
        });

        pitElement.innerHTML = `
            <div class="pit-header">
                <h3 class="pit-title">–ü–∏—Ç ${pit.id}</h3>
                <span>${pit.positions} –ø–æ–∑–∏—Ü–∏–π, ${pit.employees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</span>
            </div>
            ${chainsHTML}
        `;
        container.appendChild(pitElement);
    });

    const restingEmployees = currentSystem.employees.filter(emp => emp.isResting);
    const restingElement = document.createElement('div');
    restingElement.className = 'pit resting-section';
    restingElement.innerHTML = `
        <div class="pit-header">
            <h3 class="pit-title">üí§ –ù–∞ –æ—Ç–¥—ã—Ö–µ</h3>
            <span>${restingEmployees.length} —á–µ–ª.</span>
        </div>
        <div class="chain">
            ${restingEmployees.map(emp => 
                `<div class="employee resting">
                    <span class="employee-id">–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${emp.id}</span>
                    <span class="employee-position">–û—Ç–¥—ã—Ö</span>
                 </div>`
            ).join('')}
        </div>
    `;
    container.appendChild(restingElement);
}

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—à–∏—Ñ—Ç–∞
function performAutoshift() {
    if (!currentSystem) {
        alert('–°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É!');
        return;
    }

    console.log("=== –ù–ê–ß–ê–õ–û –ê–í–¢–û–®–ò–§–¢–ê ===");

    const targetRestingCount = currentSystem.restingEmployees;
    console.log("–î–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –æ—Ç–¥—ã—Ö–µ:", targetRestingCount);

    const allEmployees = [...currentSystem.employees];
    const shuffledEmployees = [...allEmployees].sort(() => Math.random() - 0.5);

    let employeeIndex = 0;
    
    currentSystem.pits.forEach(pit => {
        pit.employees = [];
        
        for (let i = 0; i < pit.positions && employeeIndex < shuffledEmployees.length; i++) {
            const employee = shuffledEmployees[employeeIndex];
            employee.isResting = false;
            employee.pit = pit.id;
            employee.position = i + 1;
            pit.employees.push(employee);
            employeeIndex++;
        }
    });

    for (let i = employeeIndex; i < shuffledEmployees.length; i++) {
        shuffledEmployees[i].isResting = true;
        shuffledEmployees[i].pit = null;
        shuffledEmployees[i].position = null;
    }

    currentSystem.restingEmployees = currentSystem.employees.filter(emp => emp.isResting).length;
    createChains();
    updateDisplay();
    
    console.log("=== –ê–í–¢–û–®–ò–§–¢ –ó–ê–í–ï–†–®–ï–ù ===");
    showNotification(`–ê–≤—Ç–æ—à–∏—Ñ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! –ù–∞ –æ—Ç–¥—ã—Ö–µ: ${currentSystem.restingEmployees} —á–µ–ª.`);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #28a745;
        color: white;
        padding: 15px 20px;
        border-radius: 5px;
        z-index: 1000;
        animation: slideIn 0.3s ease;
    `;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}
